import socket
import time
import sys
import can
import cantools
import json
# generated by llm
# ========== TCP 配置 ==========
SERVER_IP = '127.0.0.1'
SERVER_PORT = 12345
RECONNECT_DELAY = 2  # 重连间隔（秒）
# ==============================

# ========== CAN 配置 ==========
DBC_FILE = 'assets/20250409.dbc'
CAN_CHANNEL = 0
BITRATE = 500000
TARGET_SIGNAL = 'SGW_IBC_PedalTravelSensorSt'
# ==============================

# 加载 DBC
db = cantools.database.load_file(DBC_FILE)

# 初始化 CAN 总线
bus = can.interface.Bus(
    interface='kvaser',
    channel=CAN_CHANNEL,
    bitrate=BITRATE
)

print("📡 Listening on CAN bus and forwarding via TCP...")


def connect_to_server():
    """尝试连接服务器，失败返回 None"""
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client_socket.connect((SERVER_IP, SERVER_PORT))
        print(f"✅ Connected to server at {SERVER_IP}:{SERVER_PORT}")
        return client_socket
    except Exception as e:
        print(f"❌ Connection failed: {e}")
        return None


def main():
    client_socket = None

    try:
        while True:
            # 接收 CAN 消息（带超时，避免阻塞）
            msg = bus.recv(timeout=0.1)  # 使用短超时，避免卡死
            if msg is None:
                # 如果没有消息，检查连接状态或重连
                if client_socket is None:
                    client_socket = connect_to_server()
                    time.sleep(RECONNECT_DELAY if client_socket is None else 0.01)
                continue

            try:
                decoded = db.decode_message(msg.arbitration_id, msg.data)

                # 检查是否包含目标信号
                if TARGET_SIGNAL in decoded:
                    # 构造要发送的数据结构
                    data_to_send = {
                        "timestamp": time.time(),
                        "can_id": hex(msg.arbitration_id),
                        "signals": decoded
                    }

                    # 序列化为 JSON 字符串
                    message = json.dumps(data_to_send) + "\n"

                    # 如果未连接，尝试连接
                    if client_socket is None:
                        client_socket = connect_to_server()
                        if client_socket is None:
                            continue  # 跳过本次发送

                    # 尝试发送
                    try:
                        client_socket.send(message.encode('utf-8'))
                        print(f"📤 Sent: {list(decoded.keys())} @ {time.strftime('%H:%M:%S')}")
                    except (BrokenPipeError, ConnectionResetError, OSError):
                        print("⚠️ Connection lost. Reconnecting...")
                        client_socket.close()
                        client_socket = None

            except Exception as e:
                # 解码失败不中断，继续监听
                continue

    except KeyboardInterrupt:
        print("\n🛑 User interrupted. Closing...")
    finally:
        bus.shutdown()
        if client_socket:
            client_socket.close()
        print("👋 CAN TCP Client exited.")


if __name__ == '__main__':
    main()