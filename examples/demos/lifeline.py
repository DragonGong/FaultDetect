import numpy as np
import pandas as pd
from lifelines import KaplanMeierFitter
import matplotlib.pyplot as plt

# most code was generated by LLM, this is a demo.
def generate_can_message(t):
    """
    模拟一个简单的CAN报文，用字符串形式表示：
    "ID=0x100 SPEED=xx.xx BATTERY=yy.yy TEMP=zz.zz"
    """
    speed = 50 + 10 * np.sin(t / 50) + np.random.normal(0, 2)  # km/h
    battery = max(0, 100 - 0.1*t + np.random.normal(0, 0.5))  # %
    temp = 40 + 0.05 * t + np.random.normal(0, 0.5)  # ℃

    msg = f"ID=0x100 SPEED={speed:.2f} BATTERY={battery:.2f} TEMP={temp:.2f}"
    return msg


messages = []
for t in range(1000):  # 模拟1000秒
    msg = generate_can_message(t)
    messages.append(msg)

print("模拟CAN报文示例：")
for m in messages[:5]:
    print(m)

records = []
for t, msg in enumerate(messages):
    parts = msg.split()
    speed = float(parts[1].split("=")[1])
    battery = float(parts[2].split("=")[1])
    temp = float(parts[3].split("=")[1])
    records.append([t, speed, battery, temp])

df = pd.DataFrame(records, columns=["time", "speed", "battery", "temp"])
df.to_csv("can_data.csv", index=False)
print("\nCAN 数据已保存 -> can_data.csv")

df["event"] = (df["battery"] <= 20).astype(int)

durations = df["time"]
events = df["event"]

kmf = KaplanMeierFitter()
kmf.fit(durations, event_observed=events)

print("\n--- Kaplan-Meier 生存函数估计 ---")
print(kmf.survival_function_.head())

kmf.plot_survival_function()
plt.title("Vehicle Lifecycle Survival Curve (Battery<=20% as failure)")
plt.xlabel("Time (s)")
plt.ylabel("Survival Probability")
plt.show()
